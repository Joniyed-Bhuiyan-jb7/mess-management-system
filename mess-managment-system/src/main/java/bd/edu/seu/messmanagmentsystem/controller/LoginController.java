package bd.edu.seu.messmanagmentsystem.controller;import bd.edu.seu.messmanagmentsystem.exceptions.ResourceAlreadyExistsException;import bd.edu.seu.messmanagmentsystem.exceptions.ResourceNotExistException;import bd.edu.seu.messmanagmentsystem.model.Login;import bd.edu.seu.messmanagmentsystem.service.LoginService;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;import java.util.List;@RestController@RequestMapping(value = "/api/v1/login")public class LoginController {    private LoginService loginService;    public LoginController(LoginService loginService) {        this.loginService = loginService;    }    @PostMapping    public ResponseEntity<String> saveUser(@RequestBody Login login){        try {            loginService.saveUser(login);            return ResponseEntity.ok().body("User created");        } catch (ResourceAlreadyExistsException e) {            return ResponseEntity.badRequest().body("Username already exist..");        }    }    @GetMapping("/{userName}")    public ResponseEntity<Login> getUser(@PathVariable String  userName){        try {            Login userLoginDetails = loginService.getUser(userName);            return ResponseEntity.ok(userLoginDetails);        } catch (ResourceNotExistException e) {            return ResponseEntity.notFound().build();        }    }    @PostMapping("/{userName}")    public ResponseEntity<String> updateUserNameOrPass(@PathVariable String userName,@RequestBody Login login){        try {            loginService.UpdateUserNameorPass(userName,login);            return ResponseEntity.ok("information change successfully");        } catch (ResourceNotExistException e) {            return ResponseEntity.badRequest().body("UserName not found");        } catch (ResourceAlreadyExistsException e) {            return ResponseEntity.badRequest().body("userName already used by other");        }    }    @GetMapping("/name/{name}")    public ResponseEntity<Login> getByName(@PathVariable String name){        try {            Login userNameByName = loginService.getUserNameByName(name);            return ResponseEntity.ok(userNameByName);        } catch (ResourceNotExistException e) {            return ResponseEntity.notFound().build();        }    }    @GetMapping    public ResponseEntity<List<String>> getAll(){        return ResponseEntity.ok().body(loginService.getAll());    }    @PutMapping("/{user}/{pass}")    public ResponseEntity<String> updatePassword(@PathVariable String user,@PathVariable String pass){        try {            loginService.updatePassword(user,pass);            return ResponseEntity.ok("password updated...");        } catch (ResourceNotExistException e) {            return ResponseEntity.badRequest().body("user not found..");        }    }}
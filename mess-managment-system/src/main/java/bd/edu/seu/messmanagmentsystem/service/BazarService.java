package bd.edu.seu.messmanagmentsystem.service;import bd.edu.seu.messmanagmentsystem.ModelForResponse.BazarDetails;import bd.edu.seu.messmanagmentsystem.ModelForResponse.BazarResponse;import bd.edu.seu.messmanagmentsystem.ModelForResponse.SaveBazar;import bd.edu.seu.messmanagmentsystem.exceptions.ResourceAlreadyExistsException;import bd.edu.seu.messmanagmentsystem.exceptions.ResourceNotExistException;import bd.edu.seu.messmanagmentsystem.model.Bazar;import bd.edu.seu.messmanagmentsystem.model.Member;import bd.edu.seu.messmanagmentsystem.repository.BazaRepository;import bd.edu.seu.messmanagmentsystem.repository.MemberRepository;import org.springframework.stereotype.Service;import java.time.LocalDate;import java.util.ArrayList;import java.util.List;@Servicepublic class BazarService {    private BazaRepository bazaRepository;    private MemberRepository memberRepository;    public BazarService(BazaRepository bazaRepository, MemberRepository memberRepository) {        this.bazaRepository = bazaRepository;        this.memberRepository = memberRepository;    }    public List<BazarDetails> getBazarList(int month, int year) throws ResourceNotExistException {        LocalDate start = LocalDate.of(year,month,1);        LocalDate end = LocalDate.of(year,month,start.lengthOfMonth());        List<BazarDetails> bazarDetailsList = new ArrayList<>();        List<Bazar> bazarList = bazaRepository.getBazar(start, end);        if(!bazarList.isEmpty()){            bazarList.stream()                    .forEach(bazar -> {                        BazarDetails bazarDemo=new BazarDetails();                        bazarDemo.setMember_id(bazar.getMember().getMember_id());                        bazarDemo.setMember_name(bazar.getMember().getName().toString());                        bazarDemo.setDate(bazar.getDate());                        bazarDemo.setCost(bazar.getCost());                        bazarDemo.setDetails(bazar.getDetails());                        bazarDetailsList.add(bazarDemo);                    });            return bazarDetailsList;        }else{            throw new ResourceNotExistException("bazar list not available...");        }    }    public void saveBazar(SaveBazar saveBazar) throws ResourceNotExistException, ResourceAlreadyExistsException {        if(memberRepository.existsById(saveBazar.getMember_id())){            if(!bazaRepository.existsById(saveBazar.getBazar_id())) {                Member member = memberRepository.findById(saveBazar.getMember_id()).get();                Bazar bazar = new Bazar();                bazar.setBazar_id(saveBazar.getBazar_id());                bazar.setCost(saveBazar.getCost());                bazar.setDate(saveBazar.getDate());                bazar.setDetails(saveBazar.getDetails());                bazar.setMember(member);                bazaRepository.save(bazar);            }else{                throw new ResourceAlreadyExistsException("duplicate entry by id....");            }        }else{            throw new ResourceNotExistException("member not present...");        }    }    public BazarResponse BazarCostForMonth(int month, int year) throws ResourceNotExistException {        LocalDate start = LocalDate.of(year,month,1);        LocalDate end = LocalDate.of(year,month,start.lengthOfMonth());        if(!bazaRepository.getBazar(start,end).isEmpty()){            BazarResponse bazarResponse = new BazarResponse();            bazarResponse.setTotalBazar(getBazarList(month,year).size());            bazarResponse.setCost(bazaRepository.BazarCostForSingleMonth(start,end));            return bazarResponse;        }else{            throw new ResourceNotExistException("empty bazar this month");        }    }    public List<BazarDetails> getBazarListForSingleMember(long member_id) throws ResourceNotExistException {        if(memberRepository.existsById(member_id)){            if(!bazaRepository.getBazarDetailsForSingleMember(member_id).isEmpty()){                List<BazarDetails> bazarDetailsList = new ArrayList<>();                bazaRepository.getBazarDetailsForSingleMember(member_id)                        .stream()                        .forEach(bazar -> {                            BazarDetails bazarDetails = new BazarDetails();                            bazarDetails.setCost(bazar.getCost());                            bazarDetails.setDetails(bazar.getDetails());                            bazarDetails.setDate(bazar.getDate());                            bazarDetails.setMember_name(bazar.getMember().getName().toString());                            bazarDetails.setMember_id(bazar.getMember().getMember_id());                            bazarDetailsList.add(bazarDetails);                        });                return bazarDetailsList;            }else{                throw new ResourceNotExistException("member is not done any bazar...");            }        }else{            throw new ResourceNotExistException("member is not exist....");        }    }}
package bd.edu.seu.messmanagmentsystem.controller;import bd.edu.seu.messmanagmentsystem.ModelForResponse.MealRate_TotalMeal_BazarCost;import bd.edu.seu.messmanagmentsystem.ModelForResponse.SumOfMeal;import bd.edu.seu.messmanagmentsystem.exceptions.ResourceAlreadyExistsException;import bd.edu.seu.messmanagmentsystem.exceptions.ResourceNotExistException;import bd.edu.seu.messmanagmentsystem.model.Meal;import bd.edu.seu.messmanagmentsystem.service.MealService;import org.springframework.format.annotation.DateTimeFormat;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import java.time.LocalDate;import java.util.List;@RestController@RequestMapping(value = "api/v1/meals")public class MealController {    private MealService mealService;    public MealController(MealService mealService) {        this.mealService = mealService;    }    @GetMapping    public ResponseEntity<List<Meal>> getMeals(){        try {            return ResponseEntity.ok().body(mealService.getMeals());        } catch (ResourceNotExistException e) {            return ResponseEntity.badRequest().build();        }    }    @PostMapping    public ResponseEntity<String> addMeal(@RequestBody Meal meal){        try {            mealService.addMeal(meal);            return ResponseEntity.ok().body("meal add successfully..");        } catch (ResourceAlreadyExistsException e) {            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("resource already exist..");        } catch (ResourceNotExistException e) {            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("member not exist..");        }    }    @PutMapping    public ResponseEntity<String> updateMealDetails(@RequestBody Meal meal,long member_id){        try {            mealService.updateMealDetails(meal,member_id);            return ResponseEntity.status(HttpStatus.OK).body("meal updated successfully..");        } catch (ResourceNotExistException e) {            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("member details not found..");        }    }    @GetMapping("sum/{member_id}/{month}/{year}")    public ResponseEntity<SumOfMeal> findSumOfMealFor_member(@PathVariable long member_id,@PathVariable int month,@PathVariable int year){        try {            return ResponseEntity.ok().body(mealService.findSumOfMeal(member_id,month,year));        } catch (ResourceNotExistException e) {            return ResponseEntity.badRequest().build();        }    }    @GetMapping("/{member_id}/{month}/{year}")    public ResponseEntity<List<Meal>> allMealForSingleMember(@PathVariable long member_id,@PathVariable int month,@PathVariable int year){        try {            return ResponseEntity.ok().body(mealService.allMealForSingleMember(member_id,month,year));        } catch (ResourceNotExistException e) {            return ResponseEntity.notFound().build();        }    }    @GetMapping("{month}/{year}")    public ResponseEntity<MealRate_TotalMeal_BazarCost> getAllMeal_BazarCostForGivenMonth(@PathVariable int month, @PathVariable int year){        try {            MealRate_TotalMeal_BazarCost allMeal_bazarCostForGivenMonth = mealService.getAllMeal_BazarCostForGivenMonth(month, year);            return ResponseEntity.ok().body(allMeal_bazarCostForGivenMonth);        } catch (ResourceNotExistException e) {            return ResponseEntity.notFound().build();        }    }}
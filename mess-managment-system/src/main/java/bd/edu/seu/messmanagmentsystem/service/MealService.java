package bd.edu.seu.messmanagmentsystem.service;import bd.edu.seu.messmanagmentsystem.ModelForResponse.MealRate_TotalMeal_BazarCost;import bd.edu.seu.messmanagmentsystem.ModelForResponse.SumOfMeal;import bd.edu.seu.messmanagmentsystem.exceptions.ResourceAlreadyExistsException;import bd.edu.seu.messmanagmentsystem.exceptions.ResourceNotExistException;import bd.edu.seu.messmanagmentsystem.model.Meal;import bd.edu.seu.messmanagmentsystem.model.Member;import bd.edu.seu.messmanagmentsystem.repository.BazaRepository;import bd.edu.seu.messmanagmentsystem.repository.MealRepository;import bd.edu.seu.messmanagmentsystem.repository.MemberRepository;import org.apache.tomcat.jni.Local;import org.springframework.stereotype.Service;import java.time.LocalDate;import java.util.ArrayList;import java.util.List;import java.util.Optional;@Servicepublic class MealService {    private MealRepository mealRepository;    private MemberRepository memberRepository;    private BazaRepository bazaRepository;    public MealService(MealRepository mealRepository, MemberRepository memberRepository, BazaRepository bazaRepository) {        this.mealRepository = mealRepository;        this.memberRepository = memberRepository;        this.bazaRepository = bazaRepository;    }    public List<Meal> getMeals() throws ResourceNotExistException {        List<Meal> mealList = new ArrayList<>();        mealRepository.findAll().forEach(mealList::add);        if(!mealList.isEmpty()){            return mealList;        }else{            throw new ResourceNotExistException("empty database.....");        }    }    public void addMeal(Meal meal) throws ResourceAlreadyExistsException, ResourceNotExistException {        Meal byDateAndMember_id = mealRepository.findbyMember_idAndDate(meal.getDate(), meal.getMember_id());        if(memberRepository.existsById(meal.getMember_id())) {            if (byDateAndMember_id == null) {                mealRepository.save(meal);            } else {                throw new ResourceAlreadyExistsException("already exist....");            }        }else {            throw new ResourceNotExistException("resource not found...");        }    }    public void updateMealDetails(Meal meal, long member_id) throws ResourceNotExistException {        if(mealRepository.existsById(member_id)){            meal.setMember_id(member_id);            mealRepository.save(meal);        }else{            throw new ResourceNotExistException("member details not exist");        }    }    public SumOfMeal findSumOfMeal(long member_id,int month,int year) throws ResourceNotExistException {        LocalDate start = LocalDate.of(year,month,1);        LocalDate end = LocalDate.of(year,month,start.lengthOfMonth());        List<Meal> byMemberAndMonth = mealRepository.findByMemberAndMonth(member_id,start,end);        if(memberRepository.existsById(member_id) && !byMemberAndMonth.isEmpty()){            double sumOfMeal = mealRepository.findSumOfMeal(member_id,start,end);            Member member = memberRepository.findById(member_id).get();            SumOfMeal sum = new SumOfMeal();            sum.setTotalMeal(sumOfMeal);            sum.setName(member.getName().toString());            sum.setId(member_id);            return sum;        }else{            throw new ResourceNotExistException("member not exits...");        }    }    public List<Meal> allMealForSingleMember(long member_id, int month,int year) throws ResourceNotExistException {        LocalDate start = LocalDate.of(year,month,1);        LocalDate end = LocalDate.of(year,month,start.lengthOfMonth());        List<Meal> byMemberAndMonth = mealRepository.findByMemberAndMonth(member_id,start,end);        if(memberRepository.existsById(member_id) && !byMemberAndMonth.isEmpty()){            return byMemberAndMonth;        }else{            throw new ResourceNotExistException("member details not present...");        }    }    public MealRate_TotalMeal_BazarCost getAllMeal_BazarCostForGivenMonth(int month, int year) throws ResourceNotExistException {        LocalDate start = LocalDate.of(year,month,1);        LocalDate end = LocalDate.of(year,month,start.lengthOfMonth());        double totalMealForSingleMonth=0;        double totalBazarCost=0;        if(!mealRepository.findByMonth(start,end).isEmpty()){             totalMealForSingleMonth = mealRepository.totalMealForSingleMonth(start, end);        }else throw new ResourceNotExistException("empty meal");        if(!bazaRepository.getBazar(start,end).isEmpty()){            totalBazarCost = bazaRepository.BazarCostForSingleMonth(start, end);        }else throw new ResourceNotExistException("empty bazar");        MealRate_TotalMeal_BazarCost response = new MealRate_TotalMeal_BazarCost();        response.setCost(totalBazarCost);        response.setMeal(totalMealForSingleMonth);        if(totalBazarCost!=0 && totalMealForSingleMonth!=0){            response.setRate((totalBazarCost/totalMealForSingleMonth));        }else response.setRate(0);        return response;    }}
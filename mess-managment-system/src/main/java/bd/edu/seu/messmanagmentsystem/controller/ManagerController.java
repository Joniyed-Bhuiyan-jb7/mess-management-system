package bd.edu.seu.messmanagmentsystem.controller;import bd.edu.seu.messmanagmentsystem.exceptions.ResourceAlreadyExistsException;import bd.edu.seu.messmanagmentsystem.exceptions.ResourceNotExistException;import bd.edu.seu.messmanagmentsystem.model.Login;import bd.edu.seu.messmanagmentsystem.model.Manager;import bd.edu.seu.messmanagmentsystem.service.LoginService;import bd.edu.seu.messmanagmentsystem.service.ManagerService;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;import java.net.URL;import java.util.List;@RestController@RequestMapping(value = "/api/v1/managers")public class ManagerController {    private ManagerService managerService;    public ManagerController(ManagerService managerService) {        this.managerService = managerService;    }    @GetMapping    public ResponseEntity<List<Manager>> findAllManager(){        try {            return ResponseEntity.ok().body(managerService.findAllManager());        } catch (ResourceNotExistException e) {            return ResponseEntity.notFound().build();        }    }    @GetMapping("/{man_id}")    public ResponseEntity<Manager> findManagerById(@PathVariable long man_id){        try {            return ResponseEntity.ok().body(managerService.findManagerById(man_id));        } catch (ResourceNotExistException e) {            return ResponseEntity.notFound().build();        }    }    @PostMapping    public ResponseEntity<String> createManager(@RequestBody Manager manager){        try {            managerService.createManager(manager);            return ResponseEntity.ok().body("Manager created....");        } catch (ResourceAlreadyExistsException e) {            return ResponseEntity.badRequest().body("Resource already exist...");        }    }    @PutMapping("/{manager_id}")    public ResponseEntity<String> updateManagerInfo(@RequestBody Manager manager,@PathVariable long manager_id){        try {            managerService.updateManagerInfo(manager,manager_id);            return ResponseEntity.ok().body("manager info successfully updated..");        } catch (ResourceNotExistException e) {            return ResponseEntity.badRequest().body("manager does not exist..");        }    }    @DeleteMapping("/{manager_id}")    public ResponseEntity<String> deleteManager(@PathVariable long manager_id){        try {            managerService.deleteManager(manager_id);            return ResponseEntity.ok().body("manager deleted....");        } catch (ResourceNotExistException e) {            return ResponseEntity.badRequest().body("manager does not exist...");        }    }    @GetMapping("/{firstName}/{middleName}/{lastName}")    public ResponseEntity<List<Manager>> getManagerByName(@PathVariable String firstName,@PathVariable String middleName,@PathVariable String lastName){        try {            return ResponseEntity.ok().body(managerService.findByName(firstName,middleName,lastName));        } catch (ResourceNotExistException e) {            return ResponseEntity.notFound().build();        }    }    @GetMapping("/fb/{fb}}")    public ResponseEntity<Manager> getManagerByFB(@PathVariable String fb){        try {            return ResponseEntity.ok().body(managerService.getManagerBtFb(fb));        } catch (ResourceNotExistException e) {            return ResponseEntity.notFound().build();        }    }    @GetMapping("/country/{country}}")    public ResponseEntity<List<Manager>> getManagerByA(@PathVariable String country){        try {            return ResponseEntity.ok().body(managerService.getManagerByCountry(country));        } catch (ResourceNotExistException e) {            return ResponseEntity.notFound().build();        }    }}
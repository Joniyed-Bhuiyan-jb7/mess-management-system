package bd.edu.seu.messmanagmentsystem.service;import bd.edu.seu.messmanagmentsystem.exceptions.ResourceAlreadyExistsException;import bd.edu.seu.messmanagmentsystem.exceptions.ResourceNotExistException;import bd.edu.seu.messmanagmentsystem.model.Manager;import bd.edu.seu.messmanagmentsystem.model.Name;import bd.edu.seu.messmanagmentsystem.repository.ManagerRepository;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.ArrayList;import java.util.List;@Servicepublic class ManagerService {    private ManagerRepository managerRepository;    public ManagerService(ManagerRepository managerRepository) {        this.managerRepository = managerRepository;    }    public List<Manager> findAllManager() throws ResourceNotExistException {        List<Manager> managers = new ArrayList<>();        managerRepository.findAll().forEach(managers::add);        if(!managers.isEmpty()){            return managers;        }else{            throw new ResourceNotExistException("database is empty...");        }    }    public Manager findManagerById(long man_id) throws ResourceNotExistException {        if(managerRepository.existsById(man_id)){            return managerRepository.findById(man_id).get();        }else{            throw new ResourceNotExistException(man_id+" ");        }    }    public void createManager(Manager manager) throws ResourceAlreadyExistsException {        if(!managerRepository.existsById(manager.getMan_id())){            managerRepository.save(manager);        }else{            throw new ResourceAlreadyExistsException(manager.getName().toString());        }    }    public void updateManagerInfo(Manager manager, long manager_id) throws ResourceNotExistException {        if(managerRepository.existsById(manager_id)){            manager.setMan_id(manager_id);            managerRepository.save(manager);        }else{            throw new ResourceNotExistException(manager_id+" is not present in database....");        }    }    public void deleteManager(long manager_id) throws ResourceNotExistException {        if(managerRepository.existsById(manager_id)){            managerRepository.deleteById(manager_id);        }else{            throw new ResourceNotExistException(manager_id+" ");        }    }    public List<Manager> findByName(String firstName, String middleName, String lastName) throws ResourceNotExistException {        List<Manager> allByName = managerRepository.findAllByName(new Name(firstName, middleName, lastName));        if(!allByName.isEmpty()){            return allByName;        }else{            throw new ResourceNotExistException(middleName);        }    }    public Manager getManagerBtFb(String fb) throws ResourceNotExistException {        Manager byFacebook = managerRepository.findByFacebook(fb);        if(byFacebook!=null) {            return byFacebook;        }else{            throw new ResourceNotExistException(fb);        }    }    public List<Manager> getManagerByCountry(String country) throws ResourceNotExistException {        List<Manager> findbyCountry = managerRepository.findbyCountry(country);        if(!findbyCountry.isEmpty()){            return findbyCountry;        }else{            throw new ResourceNotExistException(country);        }    }}
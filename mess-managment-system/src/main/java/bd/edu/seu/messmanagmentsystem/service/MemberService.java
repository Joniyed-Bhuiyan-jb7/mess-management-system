package bd.edu.seu.messmanagmentsystem.service;import bd.edu.seu.messmanagmentsystem.ModelForResponse.MemberFromClient;import bd.edu.seu.messmanagmentsystem.exceptions.ResourceAlreadyExistsException;import bd.edu.seu.messmanagmentsystem.exceptions.ResourceNotExistException;import bd.edu.seu.messmanagmentsystem.model.Manager;import bd.edu.seu.messmanagmentsystem.model.Member;import bd.edu.seu.messmanagmentsystem.repository.ManagerRepository;import bd.edu.seu.messmanagmentsystem.repository.MemberRepository;import org.springframework.stereotype.Service;import java.util.ArrayList;import java.util.List;import java.util.Optional;@Servicepublic class MemberService {    private MemberRepository memberRepository;    private ManagerRepository managerRepository;    public MemberService(MemberRepository memberRepository, ManagerRepository managerRepository) {        this.memberRepository = memberRepository;        this.managerRepository = managerRepository;    }    public List<MemberFromClient> getAllMember() throws ResourceNotExistException {        List<Member> memberList = new ArrayList<>();        memberRepository.findAll().forEach(memberList::add);        if(!memberList.isEmpty()){            List<MemberFromClient> responseMemberList = new ArrayList<>();            memberList.forEach(member -> {                //todo getResponseMember is available below....                responseMemberList.add(getResponseMember(member));            });            return responseMemberList;        }else{            throw new ResourceNotExistException("not empty...");        }    }    public void createMember(MemberFromClient memberFromClient) throws ResourceAlreadyExistsException, ResourceNotExistException {        if(managerRepository.existsById(memberFromClient.getManager_id())){            if(!memberRepository.existsById(memberFromClient.getMember_id())) {                //todo getember method is available bellow....                memberRepository.save(getMember(memberFromClient));            }else{                throw new ResourceAlreadyExistsException("member is already exist...");            }        }else{            throw new ResourceNotExistException("manager is not present in databases");        }    }    public MemberFromClient getMemberDetails(long member_id) throws ResourceNotExistException {        if(memberRepository.existsById(member_id)){            return getResponseMember(memberRepository.findById(member_id).get());        }else{            throw new ResourceNotExistException(member_id+"");        }    }    public void updateMember(long member_id, MemberFromClient memberFromClient) throws ResourceNotExistException {        if(memberRepository.existsById(member_id)){            memberRepository.save(getMember(memberFromClient));        }else{            throw new ResourceNotExistException(member_id+"");        }    }    public void deleteMember(long member_id) throws ResourceNotExistException {        if(memberRepository.existsById(member_id)){            memberRepository.deleteById(member_id);        }else{            throw new ResourceNotExistException(member_id+"");        }    }    //todo this method give the member object which need to save. because we get member from client is not proper member..    public Member getMember(MemberFromClient memberFromClient){        Manager manager = managerRepository.findById(memberFromClient.getManager_id()).get();        Member member = new Member();        member.setMember_id(memberFromClient.getMember_id());        member.setName(memberFromClient.getName());        member.setAddress(memberFromClient.getAddress());        member.setEmail(memberFromClient.getEmail());        member.setFacebook(memberFromClient.getFacebook());        member.setAddDate(memberFromClient.getAddDate());        member.setManager(manager);        member.setPhone(memberFromClient.getPhone());        return member;    }    public MemberFromClient getResponseMember(Member member){        MemberFromClient memberFromClient = new MemberFromClient();        memberFromClient.setName(member.getName());        memberFromClient.setAddDate(member.getAddDate());        memberFromClient.setAddress(member.getAddress());        memberFromClient.setPhone(member.getPhone());        memberFromClient.setFacebook(member.getFacebook());        memberFromClient.setEmail(member.getEmail());        memberFromClient.setManager_id(member.getManager().getMan_id());        memberFromClient.setMember_id(member.getMember_id());        return memberFromClient;    }}
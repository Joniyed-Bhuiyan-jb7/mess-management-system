package bd.edu.seu.messmanagmentsystem.controller;import bd.edu.seu.messmanagmentsystem.ModelForResponse.MemberFromClient;import bd.edu.seu.messmanagmentsystem.exceptions.ResourceAlreadyExistsException;import bd.edu.seu.messmanagmentsystem.exceptions.ResourceNotExistException;import bd.edu.seu.messmanagmentsystem.model.Member;import bd.edu.seu.messmanagmentsystem.service.MemberService;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import org.springframework.web.multipart.support.StandardMultipartHttpServletRequest;import java.util.List;@RestController@RequestMapping("/api/v1/member")public class MemberController {   private MemberService memberService;    public MemberController(MemberService memberService) {        this.memberService = memberService;    }    @GetMapping    public ResponseEntity<List<MemberFromClient>> getAllMember(){        try {            return ResponseEntity.ok().body(memberService.getAllMember());        } catch (ResourceNotExistException e) {            return ResponseEntity.noContent().build();        }    }    @GetMapping("/{member_Id}")    public ResponseEntity<MemberFromClient> getMemberDetails(@PathVariable long member_Id){        try {            MemberFromClient memberDetails = memberService.getMemberDetails(member_Id);            return ResponseEntity.ok().body(memberDetails);        } catch (ResourceNotExistException e) {            return ResponseEntity.notFound().build();        }    }    @PostMapping    public ResponseEntity<String> createMember(@RequestBody MemberFromClient memberFromClient){        try {            memberService.createMember(memberFromClient);            return ResponseEntity.status(HttpStatus.CREATED).body("member created...");        } catch (ResourceAlreadyExistsException e) {            return ResponseEntity.badRequest().body("member already exist....");        } catch (ResourceNotExistException e) {            return ResponseEntity.badRequest().body("manager is invalid..");        }    }    @PutMapping("/{member_Id}")    public ResponseEntity<String> updateMember(@PathVariable long member_Id,@RequestBody MemberFromClient memberFromClient){        try {            memberService.updateMember(member_Id,memberFromClient);            return ResponseEntity.ok().body("member information updated....");        } catch (ResourceNotExistException e) {            return ResponseEntity.badRequest().body("member not available in database...");        }    }    @DeleteMapping("/{member_Id}")    public ResponseEntity<String> deleteMember(@PathVariable long member_Id){        try {            memberService.deleteMember(member_Id);            return ResponseEntity.status(HttpStatus.OK).body("content deleted successfully");        } catch (ResourceNotExistException e) {            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("this member not present in database...");        }    }}